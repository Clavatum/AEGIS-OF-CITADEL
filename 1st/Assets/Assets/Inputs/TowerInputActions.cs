//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Assets/Inputs/TowerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TowerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TowerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TowerInputActions"",
    ""maps"": [
        {
            ""name"": ""View"",
            ""id"": ""f0bc43ab-9cef-4d22-9f2a-2ddadcc062c2"",
            ""actions"": [
                {
                    ""name"": ""View"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cf832106-f7a5-4b7d-b178-e0c2d30c711d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""833b04ae-bf44-4587-8497-0e4e9e77089c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Actions"",
            ""id"": ""3ba0cc2a-96a6-49a7-b2ce-6cbbd3ebbdd6"",
            ""actions"": [
                {
                    ""name"": ""MouseLeft"",
                    ""type"": ""Button"",
                    ""id"": ""ce261681-0db3-4993-8e3e-7ae112e7929c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""80fd2631-2c4b-463e-b837-88661af25ac3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // View
        m_View = asset.FindActionMap("View", throwIfNotFound: true);
        m_View_View = m_View.FindAction("View", throwIfNotFound: true);
        // Actions
        m_Actions = asset.FindActionMap("Actions", throwIfNotFound: true);
        m_Actions_MouseLeft = m_Actions.FindAction("MouseLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // View
    private readonly InputActionMap m_View;
    private List<IViewActions> m_ViewActionsCallbackInterfaces = new List<IViewActions>();
    private readonly InputAction m_View_View;
    public struct ViewActions
    {
        private @TowerInputActions m_Wrapper;
        public ViewActions(@TowerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @View => m_Wrapper.m_View_View;
        public InputActionMap Get() { return m_Wrapper.m_View; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ViewActions set) { return set.Get(); }
        public void AddCallbacks(IViewActions instance)
        {
            if (instance == null || m_Wrapper.m_ViewActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ViewActionsCallbackInterfaces.Add(instance);
            @View.started += instance.OnView;
            @View.performed += instance.OnView;
            @View.canceled += instance.OnView;
        }

        private void UnregisterCallbacks(IViewActions instance)
        {
            @View.started -= instance.OnView;
            @View.performed -= instance.OnView;
            @View.canceled -= instance.OnView;
        }

        public void RemoveCallbacks(IViewActions instance)
        {
            if (m_Wrapper.m_ViewActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IViewActions instance)
        {
            foreach (var item in m_Wrapper.m_ViewActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ViewActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ViewActions @View => new ViewActions(this);

    // Actions
    private readonly InputActionMap m_Actions;
    private List<IActionsActions> m_ActionsActionsCallbackInterfaces = new List<IActionsActions>();
    private readonly InputAction m_Actions_MouseLeft;
    public struct ActionsActions
    {
        private @TowerInputActions m_Wrapper;
        public ActionsActions(@TowerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseLeft => m_Wrapper.m_Actions_MouseLeft;
        public InputActionMap Get() { return m_Wrapper.m_Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
        public void AddCallbacks(IActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionsActionsCallbackInterfaces.Add(instance);
            @MouseLeft.started += instance.OnMouseLeft;
            @MouseLeft.performed += instance.OnMouseLeft;
            @MouseLeft.canceled += instance.OnMouseLeft;
        }

        private void UnregisterCallbacks(IActionsActions instance)
        {
            @MouseLeft.started -= instance.OnMouseLeft;
            @MouseLeft.performed -= instance.OnMouseLeft;
            @MouseLeft.canceled -= instance.OnMouseLeft;
        }

        public void RemoveCallbacks(IActionsActions instance)
        {
            if (m_Wrapper.m_ActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionsActions @Actions => new ActionsActions(this);
    public interface IViewActions
    {
        void OnView(InputAction.CallbackContext context);
    }
    public interface IActionsActions
    {
        void OnMouseLeft(InputAction.CallbackContext context);
    }
}
